Infrastructure as Code is a practice where you manage and provision IT infrastrucutre (Virtual Machines, networks, load balancers) using code rather than manual processes. It treates infrastructure as you would treat software: you write
code to define what you want, and the code is then executed to create or modify the infrastructure.

Key benefits of IaC: Consistency, Automation, Version control, Agility, and Collaboration.

For example: Imagine you want to create a web application environment consisting of two virtual machines, a load balancer, and a database. Using IaC, you would write a configuration file (JSON) that specifies the desire configuration. 

----------------
resource "aws_instance" "web_server" {
  count = 2
  ami = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
}

resource "aws_elb" "load_balancer" {
  instances = [aws_instance.web_server.*.id]
}

resource "aws_db_instance" "database" {
  engine = "mysql"
  instance_class = "db.t2.micro"
}
--------------------
When you execute this code using a tool like Terraform, it communicates with your cloud provider (AWS) to create the specified infrastructure components. 




