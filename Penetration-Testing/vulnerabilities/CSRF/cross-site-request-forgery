CSRF is a web security vulnerability that allows an attacker to induce users to perform actions that they do not intend to perform. It allows an attacker to p[artly circumvent the same origin policy
, which is designed to prevent different websites from interfering with each other.

For example: This is might be to change the email address on their account, to change their password, or to make a funds transfer. Depending on the nature of the action, the attacker might be able to 
gain full control over the user's account. If the compromised user has a privileged role withi8n the application, then the attacker might be able to take full control of all the application's 
data and functionality.

<form acttion="https://dummy-site.com/my-account/change-email" method='POST'>
  <input type='hidden' name='email' value='hacker@gmail.com'>
</form>
<script>document.forms[0].submit():</script>


Method:
1: Change HTTP method POST to GET or GET to POST
2: Try to use another account CSRF token to get successful 200 response
3: Play with request header like pass empty string to cookies or csrf token.

Common defences against CSRF:

Successfully finding and exploiting CSRF vulnerabilities often involves bypassing anti-CSRF measures deployed by the target website, the victim's browser, or both.

1: CSRF Token: Unpredictable value that is generated by the server-side application and shared with client.
  a: Validation of CSRF token depends on request method=> 
     Some application corectly validate the token when the request uses the POST method but skip the validation when the GET method is used. 

Example=> POST /my-account/change-email HTTP 1.2 to GET /my-account/change-email?email=hacker@gmail.com

  b: Validation of CSRF token depend on token being present=>
     Some application correctly validate the token when it is present but skip the validation if the token is omitted. In this situation, the attacker can remove the entire parameter
     containing the token to bypass the validation and deliver a CSRF attack.
Example=> POST /my-account/change-email HTTP 1.0
          HOST: https://example.com.au
          cookies:adsfberwqt649+84asdfwqer
          email=example@gmail.com&csrf=asdfwertwer4644

TO
          POST /my-account/change-email HTTP 1.0
          HOST: https://example.com.au
          cookies:adsfberwqt649+84asdfwqer
          email=example@gmail.com

(csrf token removed)  
  c: CSRF token is not tied to the user session=>
     Some application do not validate that the token belongs to the same session as the user who is making the request. Instead, the application maintains a global pool of tokens that it has issued
     and accepts any token that appears in this pool.
     In this situation, the attacker can log in to the application using their own account, obtain a valid token, and then feed that token to the victim user in their CSRF attack.
   
2: SameSite cookies: Samesites is a browser security mechanism that determines when a website's cookies are included in requestes orginating from other websites. As requested to perform 
sensitive actions typically require an authenticated session cookie. Since 2021, Chrome enforces Lax SameSite restrcitions by default.
3: Referer-based validation: Some application make use of the HTTP Referer header to attempt to defend against CSRF attacks, normally by verifying that the request originated from the 
application's own domain. This is generally less effective than CSRF token validation.
